html {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    color: #0a0a23;
}

span[class~="sr-only"] {
    /*selector will select any span element whose class includes sr-only.*/
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    -webkit-clip-path: inset(50%) !important;
    /*clip property is used to define the visible portions of an element.
    clip-path property determines the shape the clip property should take. Set both the clip-path and 
    -webkit-clip-path properties to the value of inset(50%),
    forming the clip-path into a rectangle within the element.*/

    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    /*To prevent the text content from overflowing,*/
    white-space: nowrap !important;

    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important;
    /*This will ensure that not only are they no longer visible,
        but they are not even within the page view.*/
}

/*Rather than having to constantly double-check you are not overwriting your earlier properties,
you can use the !important keyword to ensure these properties are always applied,
regardless of order or specificity.*/

h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex {
    display: flex;
    flex-direction: column-reverse;
    /*this will display the nested elements from bottom to top.*/

    gap: 1rem;
}

h1 .flex span:first-of-type {
    /*The: first-of-type pseudo-selector is used to target the first element that matches the selector. 
    Create an h1 .flex span:first-of-type selector to target the first span element in your .flex 
    container.*/

    font-size: 0.7em;
}

h1 .flex span:last-of-type {
    /*The: last-of-type pseudo-selector does the exact opposite - it targets the last element that
     matches the selector. Create an h1 .flex span:last-of-type selector to target the last span in 
     your flex container, and give it a font-size property set to 1.2em to make it look like a header.*/

    font-size: 1.2em;
}

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

#years {
    top: 0;
    display: flex;
    justify-content: flex-end;
    position: sticky;
    color: #fff;
    background-color: #0a0a23;
    z-index: 999;
    /*Ensure your years do not get hidden*/
    margin: 0 -2px;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;

    /*The calc() function is a CSS function that allows you to calculate a value based on other values. For example,
        you can use it to calculate the width of the viewport minus the margin of an element:*/

}

#years span[class] {
    /*The span[class] syntax will target any span element that has a class attribute set,
        regardless of the attribute's value.*/
    font-weight: bold;
    width: 4.5rem;
    text-align: right;
}

.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
}


table {
    border-collapse: collapse;
    /*allow cell borders to collapse into a single border,
        instead of a border around each cell*/

    border: 0;
    width: 100%;
    position: relative;
    margin-top: 3rem;
}

table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
}

tbody td {
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem;
}

tbody th {
    width: calc(100% - 12rem);
}

tr[class="total"] {
    /*The [attribute="value"] selector targets any element that has an attribute with a specific value. Create a tr[class="total"] 
    selector to target specifically your tr elements with the total class.*/
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}

tr[class="total"] th {
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

/*The key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total. 
The second will select tr elements where the class includes total.*/

tr .total td {
    /*You can use this selector to target all td elements within your .total rows*/
    text-align: right;
    padding: 0 0.25rem;
}


/*The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type. 
Use this pseudo-selector to target the third td element within your total table rows. Give it a right padding of 0.5rem.*/
tr.total td:nth-of-type(3) {
    padding-right: 0.5rem;
}

tr.total:hover {
    background-color: #99c9ff;
}

td.current {
    font-style: italic;
}

tr.data {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}

tr.data th .description {
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

tr.data td {
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
}

tr.data td:last-of-type {
    padding-right: 0.5rem;
}